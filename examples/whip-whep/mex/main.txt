


package main

import (
	"fmt"
	"io"
	"net/http"
	"github.com/pion/interceptor"
	"github.com/pion/interceptor/pkg/intervalpli"
	"github.com/pion/webrtc/v4"
)

var (
	screenTrack *webrtc.TrackLocalStaticRTP
	cameraTrack *webrtc.TrackLocalStaticRTP
	audioTrack  *webrtc.TrackLocalStaticRTP
	peerConnectionConfiguration = webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{
			{
				URLs: []string{"stun:stun.l.google.com:19302", "stun:stun1.l.google.com:19302"},
			},
			{
				URLs:       []string{"turn:relay1.expressturn.com:3478"},
				Username:   "ef5d6f0c",
				Credential: "nf4A2v6p",
			},
		},
	}
)

func enableCORS(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Access-Control-Expose-Headers", "Location")
	if r != nil && r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}
}

func main() {
	var err error
	screenTrack, err = webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{
		MimeType: webrtc.MimeTypeVP8,
	}, "screen", "pion")
	if err != nil {
		panic(err)
	}
	cameraTrack, err = webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{
		MimeType: webrtc.MimeTypeH264,
	}, "camera", "pion")
	if err != nil {
		panic(err)
	}
	audioTrack, err = webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{
		MimeType: webrtc.MimeTypeOpus,
	}, "audio", "pion")
	if err != nil {
		panic(err)
	}

	http.HandleFunc("/whip", whipHandler)
	http.HandleFunc("/whep", whepHandler)

	fmt.Println("Server running on http://localhost:8082")
	http.ListenAndServe(":8082", nil)
}

func whipHandler(res http.ResponseWriter, req *http.Request) {
	enableCORS(res, req)
	if req.Method == "OPTIONS" {
		return
	}

	offer, err := io.ReadAll(req.Body)
	if err != nil || len(offer) == 0 {
		http.Error(res, "Failed to read request body", http.StatusBadRequest)
		return
	}

	mediaEngine := &webrtc.MediaEngine{}
	mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeVP8, ClockRate: 90000,
		},
		PayloadType: 96,
	}, webrtc.RTPCodecTypeVideo)
	mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeVP8, ClockRate: 90000,
		},
		PayloadType: 97,
	}, webrtc.RTPCodecTypeVideo)
	mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeOpus, ClockRate: 48000,
		},
		PayloadType: 111,
	}, webrtc.RTPCodecTypeAudio)

	interceptorRegistry := &interceptor.Registry{}
	pliInterceptor, _ := intervalpli.NewReceiverInterceptor()
	interceptorRegistry.Add(pliInterceptor)

	api := webrtc.NewAPI(
		webrtc.WithMediaEngine(mediaEngine),
		webrtc.WithInterceptorRegistry(interceptorRegistry),
	)

	peerConnection, err := api.NewPeerConnection(peerConnectionConfiguration)
	if err != nil {
		http.Error(res, "Failed to create PeerConnection", http.StatusInternalServerError)
		return
	}

	//var firstVideoReceived bool
	//var screenTrackAssigned, cameraTrackAssigned bool
	var firstVideoReceived bool

peerConnection.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
    var localTrack *webrtc.TrackLocalStaticRTP

    fmt.Printf("üì• Received track Codec: %s | ID: %s\n", track.Codec().MimeType, track.ID())

    if track.Kind() == webrtc.RTPCodecTypeVideo {

        if firstVideoReceived {
            localTrack = screenTrack
            fmt.Println("‚úÖ Assigned to screen track (first video)")
        } else {
			firstVideoReceived = true

            localTrack = cameraTrack
            fmt.Println("‚úÖ Assigned to camera track (second video)")
        }
    } else if track.Kind() == webrtc.RTPCodecTypeAudio {
        localTrack = audioTrack
        fmt.Println("‚úÖ Assigned to audio track")
    }

    if localTrack == nil {
        fmt.Println("‚ö†Ô∏è Track not assigned properly")
        return
    }

    rtpBuf := make([]byte, 1400)
    for {
        n, _, readErr := track.Read(rtpBuf)
        if readErr != nil {
            fmt.Println("‚ùå Error reading from track:", readErr)
            break
        }
        if _, writeErr := localTrack.Write(rtpBuf[:n]); writeErr != nil {
            fmt.Println("‚ùå Error writing to local track:", writeErr)
            break
        }
    }
	
})

	
	
	
	
	
	

	writeAnswer(res, peerConnection, offer, "/whip")
}

func whepHandler(res http.ResponseWriter, req *http.Request) {
	enableCORS(res, req)

	offer, err := io.ReadAll(req.Body)
	if err != nil {
		http.Error(res, "Failed to read offer", http.StatusBadRequest)
		return
	}

	peerConnection, err := webrtc.NewPeerConnection(peerConnectionConfiguration)
	if err != nil {
		http.Error(res, "Failed to create PeerConnection", http.StatusInternalServerError)
		return
	}

	senders := []*webrtc.RTPSender{}
	for _, track := range []*webrtc.TrackLocalStaticRTP{screenTrack, cameraTrack, audioTrack} {
		sender, err := peerConnection.AddTrack(track)
		if err != nil {
			fmt.Printf("‚ùå Failed to add track: %v\n", err)
			continue
		}
		senders = append(senders, sender)
		go readRTCP(sender)
	}

	writeAnswer(res, peerConnection, offer, "/whep")
}

func readRTCP(rtpSender *webrtc.RTPSender) {
	rtcpBuf := make([]byte, 1500)
	for {
		if _, _, err := rtpSender.Read(rtcpBuf); err != nil {
			return
		}
	}
}

func writeAnswer(res http.ResponseWriter, peerConnection *webrtc.PeerConnection, offer []byte, path string) {
	peerConnection.OnICEConnectionStateChange(func(state webrtc.ICEConnectionState) {
		fmt.Printf("ICE Connection State changed: %s\n", state.String())
		if state == webrtc.ICEConnectionStateFailed {
			_ = peerConnection.Close()
		}
	})

	if err := peerConnection.SetRemoteDescription(webrtc.SessionDescription{
		Type: webrtc.SDPTypeOffer,
		SDP:  string(offer),
	}); err != nil {
		http.Error(res, "Failed to set remote description", http.StatusInternalServerError)
		return
	}

	gatherComplete := webrtc.GatheringCompletePromise(peerConnection)
	answer, _ := peerConnection.CreateAnswer(nil)
	peerConnection.SetLocalDescription(answer)
	<-gatherComplete

	res.Header().Add("Location", path)
	res.WriteHeader(http.StatusCreated)
	fmt.Fprint(res, peerConnection.LocalDescription().SDP)
}
